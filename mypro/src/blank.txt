1. Seamless Integration
"Connect Effortlessly"
Integrate with your existing tools and workflows without a hitch.

2. 24/7 Customer Support
"Always Here for You"
Get round-the-clock support from our dedicated team.

3. Advanced Security
"Top-Notch Protection"
Ensure your data is safe with our cutting-edge security features.

4. User-Friendly Interface
"Simplicity at Its Best"
Enjoy an intuitive interface designed for ease of use.

5. Customizable Solutions
"Tailored Just for You"
Adapt our solutions to fit your specific needs and preferences.

6. Real-Time Analytics
"Insights at Your Fingertips"
Access comprehensive analytics and reports instantly.

7. Scalable Solutions
"Grow with Us"
Expand effortlessly as your business needs evolve.

8. Affordable Pricing
"Value for Money"
Benefit from our competitive pricing plans and great value.

9. Expert Consultation
"Guidance from the Best"
Receive personalized advice from industry experts.

10. Quick Setup
"Get Started Fast"
Enjoy a rapid and hassle-free setup process

mongodb: mongodb://localhost:27017//mypro
heklll
mongodb://localhost:27017
.carousel-container {
  width: 100%; /* Make the carousel take full width */
  height: 89vh; /* Full viewport height */
  margin: 0 auto;
  overflow: hidden; /* Ensure no overflow */
}

.slick-slide img {
  width: 100%; /* Make the image take full width of its container */
  height: 100%; /* Make the image take the full height */
  object-fit: cover; /* Ensure the image scales to cover the container without distortion */
}
https://cdn-icons-png.flaticon.com/128/2052/2052385.png
https://cdn-icons-png.flaticon.com/128/3389/3389596.png
https://cdn-icons-png.flaticon.com/128/12988/12988677.png

<div
              class="btn-group w-25 my-1 "
              role="group"
              aria-label="Basic outlined example"
            > 
            
              {isLoggedIn ? (
                <div className="md-2">
                <img
                    src="https://cdn-icons-png.flaticon.com/128/12259/12259373.png"
                    alt="Profile"
                    className="rounded-circle"
                    style={{ width: '55px', height: '55px' }}
                />
                </div>
            ) : (
                <>
                <div className=""></div>
                    <button
                        type="button"
                        className="btn btn-outline-success p-2 fw-bold"
                        onClick={() => {
                            window.location.href = "./login.js";
                        }}
                    >
                        Login
                    </button>

                    <button
                        type="button"
                        className="btn btn-outline-success p-2 fw-bold"
                        onClick={() => {
                            window.location.href = "./sign.js";
                        }}
                    >
                        Sign Up
                    </button>
                </>
            )}
            </div>
            className="btn-group w-25 my-1 "

            db.servicePackages.insertMany([
    {
        name: "Basic Service",
        description: "Oil change, filter replacement, and a 20-point inspection.",
        price: 50,
        createdAt: new Date(),
        updatedAt: new Date()
    },
    {
        name: "Premium Service",
        description: "Complete vehicle inspection, engine diagnostics, and more.",
        price: 150,
        createdAt: new Date(),
        updatedAt: new Date()
    },
    {
        name: "Ultimate Service",
        description: "Full service package with pickup and drop service, all repairs included.",
        price: 250,
        createdAt: new Date(),
        updatedAt: new Date()
    }
]);
'0': ObjectId('670b593e02787a7d66df2f2a'),
    '1': ObjectId('670b593e02787a7d66df2f2b'),
    '2': ObjectId('670b593e02787a7d66df2f2c')

      useEffect(() => {
    const fetchRequests = async () => {
      try {
        const res = await axios.get("http://localhost:5000/admin/service-requests");
        setRequests(res.data.requests);
      } catch (error) {
        console.error("Error fetching service requests:", error);
      }
    };

    fetchRequests();
  }, []);


  /*
const express = require('express');
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
const cors = require('cors');

const app = express();
app.use(cors());
app.use(express.json());

// MongoDB connection
mongoose.connect('mongodb://localhost:27017/mypro', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

// User schema and model
const userSchema = new mongoose.Schema({
    username: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

const vehicleSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    model: { type: String, required: true },
    registrationNumber: { type: String, required: true },
});

const activeUserSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, required: true },
    loginTime: { type: Date, default: Date.now }
});
const serviceRequestSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    vehicleId: { type: mongoose.Schema.Types.ObjectId, ref: 'Vehicle', required: true },
    servicePackageId: { type: mongoose.Schema.Types.ObjectId, ref: 'ServicePackage', required: true },
    status: { type: String, enum: ['pending', 'accepted'], default: 'pending' },
    createdAt: { type: Date, default: Date.now }});
const servicePackageSchema = new mongoose.Schema({
        name: { type: String, required: true },
        description: { type: String, required: true },
        price: { type: Number, required: true },
        createdAt: { type: Date, default: Date.now }
    });

const ActiveUser = mongoose.model('ActiveUser', activeUserSchema);
const Vehicle = mongoose.model('Vehicle', vehicleSchema);
const User = mongoose.model('User', userSchema);
const ServiceRequest = mongoose.model('ServiceRequest', serviceRequestSchema);
const ServicePackage = mongoose.model('ServicePackage', servicePackageSchema);

// Registration route
app.post('/regis', async (req, res) => {
    const { username, password } = req.body;
    try {
        const hashedPassword = await bcrypt.hash(password, 10);
        const user = new User({ username, password: hashedPassword });
        await user.save();
        res.status(201).send('User created');
    } catch (error) {
        res.status(400).send(error.message);
    }
});

// Login route
app.post('/login', async (req, res) => {
    const { username, password } = req.body;

    const user = await User.findOne({ username });
    if (!user) {
        return res.json({ success: false, message: 'User not found' });
    }

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) {
        return res.json({ success: false, message: 'Invalid credentials' });
    }

    const activeUser = new ActiveUser({ userId: user._id });
    await activeUser.save();
    res.json({ success: true, message: 'Login successful' });
});

// Logout route
app.post('/logout', async (req, res) => {
    const result = await ActiveUser.deleteMany({});
    if (result) {
        return res.json({ success: true, message: 'Logout successful' });
    }
});

// Add vehicle route
app.put('/add-vehicle', async (req, res) => {
    const { model, registrationNumber } = req.body;

    try {
        const activeUser = await ActiveUser.findOne();
        if (!activeUser) {
            return res.status(404).json({ success: false, message: 'No active user found' });
        }

        const newVehicle = new Vehicle({
            userId: activeUser.userId,
            model,
            registrationNumber
        });

        await newVehicle.save();
        res.status(201).json({ success: true, message: 'Vehicle added successfully', vehicle: newVehicle });
    } catch (error) {
        res.status(500).json({ success: false, message: error.message });
    }
});

// Fetch user data and vehicles route
app.get('/user', async (req, res) => {
    const activeUser = await ActiveUser.findOne(); // Get the active user
    if (!activeUser) {
        return res.status(404).json({ success: false, message: 'No active user found' });
    }

    const user = await User.findById(activeUser.userId);
    if (!user) {
        return res.status(404).json({ success: false, message: 'User not found' });
    }

    const vehicles = await Vehicle.find({ userId: user._id }); // Fetch all vehicles for the user

    res.json({ success: true, user: { _id: user._id, email: user.username, vehicles } }); // Include vehicles in the response
});
//service request
app.post('/book-service', async (req, res) => {
    const { userId, vehicleId, servicePackageId } = req.body; // Include vehicleId

    const newRequest = new ServiceRequest({
        userId,
        vehicleId, // Set vehicleId
        servicePackageId,
    });

    try {
        await newRequest.save();
        res.status(200).json({ success: true, message: 'Service request created successfully' });
    } catch (error) {
        res.status(500).json({ success: false, message: 'Error creating service request', error });
    }
});
//request
app.get('/service-requests/:userId', async (req, res) => {
    const { userId } = req.params;
    try {
        const requests = await ServiceRequest.find({ userId }); // Assuming ServiceRequest is your service request model
        res.json({ success: true, requests });
    } catch (error) {
        res.status(500).json({ success: false, message: error.message });
    }
});
// Fetch all users
app.get('/admin/users', async (req, res) => {
    try {
        const users = await User.find({});
        res.status(200).json({ success: true, users });
    } catch (error) {
        res.status(500).json({ success: false, message: 'Failed to fetch users', error });
    }
});

// Fetch all service packages
app.get('/admin/service-packages', async (req, res) => {
    try {
        const packages = await ServicePackage.find({});
        res.status(200).json({ success: true, packages });
    } catch (error) {
        res.status(500).json({ success: false, message: 'Failed to fetch service packages', error });
    }
});


// Fetch all service requests
app.get('/admin/service-requests', async (req, res) => {
    try {
        const requests = await ServiceRequest.find({})
            .populate('userId', 'username')
            .populate('vehicleId', 'model registrationNumber')
            .populate('servicePackageId', 'name');
        res.status(200).json({ success: true, requests });
    } catch (error) {
        res.status(500).json({ success: false, message: 'Failed to fetch service requests', error });
    }
});
// Fetch active users
// Fetch all active users
app.get('/admin/active-users', async (req, res) => {
    try {
        const activeUsers = await ActiveUser.find().populate('userId', 'username'); // Assuming userId has a reference to the User collection
        res.json({ success: true, users: activeUsers });
    } catch (error) {
        res.status(500).json({ success: false, message: error.message });
    }
});
// Update service request status
app.put('/service-request/:id/status', async (req, res) => {
    const { id } = req.params; // Get the service request ID from the URL
    const { status } = req.body; // Get the new status from the request body

    try {
        const updatedRequest = await ServiceRequest.findByIdAndUpdate(
            id,
            { status },
            { new: true } // Return the updated document
        );

        if (!updatedRequest) {
            return res.status(404).json({ success: false, message: 'Service request not found' });
        }

        res.json({ success: true, message: 'Status updated successfully', request: updatedRequest });
    } catch (error) {
        res.status(500).json({ success: false, message: error.message });
    }
});



// Start the server
app.listen(5000, () => {
    console.log('Server running on port 5000');
});


------------------
    '0': ObjectId('670e6387925a0eaa818e6e63'),
    '1': ObjectId('670e6387925a0eaa818e6e64'),
    '2': ObjectId('670e6387925a0eaa818e6e65')